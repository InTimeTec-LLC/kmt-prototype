import java.text.SimpleDateFormat
import java.util.Date
import org.ajoberstar.grgit.Grgit
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.11'
        id 'net.ltgt.apt' version '0.10'
    id 'org.ajoberstar.grgit' version '1.7.2'
}

version = '1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'war'

bootRepackage {
    mainClass = 'com.itt.Application'
}

checkstyle {
    // use one common config file for all subprojects
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
}

war {
    baseName = project.name
    version =  "${version}"
    from 'static'
}
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly 'org.projectlombok:lombok:1.16.18'
    apt "org.projectlombok:lombok:1.16.18"
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:1.5.9.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-web:1.5.8.RELEASE")
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-freemarker')
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'org.mock-server:mockserver-netty:5.2.3'
    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.3.2'
    compile group: 'com.auth0', name: 'java-jwt', version: '3.2.0'
    testCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "2.0.0"
    testCompile group: "cz.jirutka.spring", name: "embedmongo-spring", version: "1.3.1"
    testCompile("org.springframework.boot:spring-boot-starter-test:1.5.8.RELEASE")
}

//Task that generates code coverage report.
jacocoTestReport {
 additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html"
    }
    executionData = files('build/jacoco/test.exec')
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*jwt**'
            ])
        })
    }
}

//Generates a new POM.xml for maven builds
task writeNewPom << {
    pom {
        project {
            groupId 'com.itt.jmtemplate'
            artifactId 'KMT'
            version '1.0.0'
        
            inceptionYear '2017'
            licenses {
                license {
                    name 'InTimeTec License'
                    url 'http://www.intimetec.com'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}
task repositoryTests(type: Test, dependsOn: testClasses){
    include '**/*RepositoryTests*'
}
/**
 * Custom test runner task to execute the tests in specific order.
 * First all repository tests are executed, followed by data seeding and then the rest of the unit tests
 */
task runUnitTests(type: Test){
    exclude '**/*Integ*Test*'
    exclude '**/*jwt*'
    finalizedBy jacocoTestReport 
}
task integrationTests(type: Test) {
    include '**/*Integ*Test*'
}

// Inject JacocoTestReport as part of test execution
test { 
    useJUnit {
        excludeCategories 'com.itt.test_category.IntegrationTests'
    }
    finalizedBy jacocoTestReport
} 

    
tasks.withType(Test){
    testLogging {
        events 'started', 'passed'
    }
}
task createDist{
    copy{
        println "Current version:${version} buildDir:${buildDir}"
        into ("${projectDir}/dist")
        from ("${buildDir}/libs/${project.name}-${version}.war"){
            rename("${project.name}-${version}.war","ROOT.war")
        }
    }
    copy{
        from "${projectDir}/scripts/start.sh"
        into ("${projectDir}/dist")
    }
         new File("$projectDir/dist/version.txt").text = """
    Version: $version
    Revision: ${Grgit.open(currentDir: file('.')).head().id}
    Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
    Application-name: ${project.name}
    """
}
build {
       finalizedBy createDist
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }
}